//main.cpp
#include<iostream>
#include"LinkBinTree.h"
#include"LinkQueue.h"
#include"LinkStack.h"
#include<fstream>
#include<string>
const int MAXSIZE=512;//树的最大结点数，根据深度k(k=8)确定，为2^(k+1),多一层用于储存修改值
using namespace std;
int main()
{
	string *s,a;
	s=new string[MAXSIZE];
	for(int i=1;i<MAXSIZE;i++)//全部赋初值0
		s[i]="0";
	fstream infile;
	infile.open("source.txt",ios::in);
	if(!infile.is_open())
	{
		cout<<"文件以读方式打开失败"<<endl;
		return 0;
	}
	for(int i=1;i<MAXSIZE;i++)//把整理好的信息录入（按完全二叉树编号）
		infile>>s[i];//实际只录入到八层
	infile.close();
                //信息读取完毕，开始构建二叉树
	LinkBinTree<string> Tree;//声明以字符串为数据元素的二叉树
	LinkedNode<string> *pNode=NULL,*pNewNode=NULL;
	LinkedNode<string> *pNodeL=NULL,*pNodeR=NULL,*Root=NULL;
	LinkQueue<LinkedNode<string>*> q;//声明以字符串为数据元素的队列
	//构建满二叉树
	pNewNode=Tree.Creatroot(s[1]);//创建根结点
	q.Insert(pNewNode);//将根结点入队
	for(int i=2;i<MAXSIZE;i++)//将其余信息录入树中
	{
		q.Out(pNode);  //结点出队                              
		pNewNode=Tree.InsertLC(pNode,s[i]);  //插入出队结点的左孩子      
		q.Insert(pNewNode);//把左孩子结点入队
		i=i+1;
		//q.Out(pNode);
		pNewNode=Tree.InsertRC(pNode,s[i]);//插入右孩子
		q.Insert(pNewNode);
	}
	for(int i=0;i<256;i++)//将创建树时未出队的节点全部出队
		q.Out(pNode);
	//开始决策
	int i=1;
	Root=Tree.Getroot();//获取根结点
	cout<<Root->data<<endl;
	while(1)
	{
		if(Root->pLChild->data=="0"||Root->pLChild==NULL)
			break;
L:		cin>>a;
		if(a=="是")
		{
			pNodeL=Tree.GetLC(Root);
			cout<<pNodeL->data<<endl;
			Root=pNodeL;
			i=i*2;
		}
		if(a=="否")
		{
			pNodeR=Tree.GetRC(Root);
			cout<<pNodeR->data<<endl;
			Root=pNodeR;
			i=i*2+1;
		}
		if(a!="是"&&a!="否")
		{
			cout<<"输入非法，请重新输入:";
			goto L;
		}
	}
	cout<<endl;
	cout<<"是否是正确答案?"<<endl;
	cin>>a;
	if(a=="是")
		return 0;
	if(a=="否") //进行学习        
	{
		//修改原结点
		pNode=Root;//找到要替换的结点
		cout<<"输入新问题:";
		cin>>a;//设置结点新值(即输入新问题) 
		s[i]=a;
		Tree.ChangeNodeVal(pNode,a); 
		//修改左孩子结点
		cout<<"输入左答案:";
		cin>>a;
		s[i*2]=a;
	    pNodeL=Tree.GetLC(pNode);
		Tree.ChangeNodeVal(pNodeL,a);
		//修改右孩子结点
		cout<<"输入右答案:";
		cin>>a;
		s[i*2+1]=a;
		pNodeR=Tree.GetRC(pNode);
		Tree.ChangeNodeVal(pNodeR,a);
	}
	//把修改后的信息用文本输出
		fstream outfile;
		outfile.open("sourceout.txt",ios::out);
		if(!outfile.is_open())
		{
			cout<<"文件以写方式打开失败"<<endl;
			return 0;
		}
		for(int i=1;i<MAXSIZE;i++)
			outfile<<s[i]<<endl;
		outfile.close();
return 0;
}