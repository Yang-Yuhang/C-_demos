LinkQueue.h
#ifndef LINKQUEUE_H
#define LINKQUEUE_H
#include<iostream>
using namespace std;
template<class T>//结点类模板
class LinkeNode
{
	template<class T>
	friend class LinkQueue; //将链接队列类声明为友类
public:
	LinkeNode()//构造函数
	{
		next=NULL;
	}
private:
	T Data;//数据域
	LinkeNode<T> *next;//指针域
};
template<class T>//链接队列类模板
class LinkQueue
{
public:
	LinkQueue();//构造函数
	bool Insert(const T &x);//入队（队尾插入）
	bool IsEmpty();//判断队列是否为空
	bool Out(T &x);//出队（队头删除）
	void Output(ostream &out);//输出队列
private:
	LinkeNode<T> *front;//队头指针
	LinkeNode<T> *rear;//队尾指针
	int size;//队列实际元素个数
};
//构造函数,创建有一个结点的空队列
template<class T>
LinkQueue<T>::LinkQueue() //初始化时要使得front=rear;
{
	front=rear=new LinkeNode<T>;
}
//入队
template<class T>
bool LinkQueue<T>::Insert(const T &x)//加const使得常量也可以插入队列
{
	LinkeNode<T> *p=new LinkeNode<T>;
	if(p==NULL)
		return false;
	else
	{
	    rear->Data=x;
	    rear->next=p;
	    rear=p;
		return true;
	}
}
//出队
template<class T>
bool LinkQueue<T>::Out(T &x)
{
	if(front==rear)
		return false;
	else
	{
		LinkeNode<T> *p=new LinkeNode<T>;
		x=front->Data;
		p=front;
		front=front->next;
		delete p;
		return true;
	}
}
//判断队列是否为空
template<class T>
bool LinkQueue<T>::IsEmpty()
{
	return front==rear;
}
//输出队列
template<class T>
void LinkQueue<T>::Output(ostream &out)
{
	LinkeNode<T> *p=front;
	while(p!=rear)    //输出结束判断
	{
		out<<p->Data<<" ";
		p=p->next;
	}
}
//重载插入运算符<<
template<class T>
ostream& operator<<(ostream &out,LinkQueue<T> &x)
{
	x.Output(out);
	return out;
}
#endif