//LinkBinTree.h
#ifndef LINKBINTREE_H
#define LINKBINTREE_H
#include<iostream>
#include"LinkQueue.h"
#include"LinkStack.h"
using namespace std;
template<class T>//结点类模板
class LinkedNode
{
	template<class T>
	friend class LinkBinTree;//声明为二叉树二叉链表类的友类
public:
	LinkedNode()//无参构造函数
	{
		pLChild=pRChild=NULL;
	}
	LinkedNode(const T &x)//有参构造函数
	{
		pLChild=pRChild=NULL;
		data=x;
	}

	LinkedNode<T> *pLChild,*pRChild;
	T data;
};
template<class T>//二叉树二叉链表类模板
class LinkBinTree
{
public:
	LinkBinTree();//构造函数
	//~LinkBinTree;//析构函数
	bool IsEmpty();//判断树是否为空
	LinkedNode<T>* Creatroot(const T &x); //以指定元素值创建根结点；
	LinkedNode<T>* Getroot();//获取根结点
	LinkedNode<T>* InsertLC(LinkedNode<T>* pNode,const T&x);//将一个结点作为指定结点的左孩子插入；
	LinkedNode<T>* InsertRC(LinkedNode<T>* pNode,const T&x);//将一个结点作为指定结点的右孩子插入;
	bool GetNodeVal(LinkedNode<T>* pNode,T &x); //获取指定结点元素值；
	bool ChangeNodeVal(LinkedNode<T>* pNode,const T &x);//修改指定结点元素值；
	LinkedNode<T>* GetLC(LinkedNode<T>* pNode);//获取指定结点的左孩子结点；
	LinkedNode<T>* GetRC(LinkedNode<T>* pNode);//获取指定结点的左孩子结点；
	void LevelOrderTraverse();//逐层遍历
	LinkedNode<T>* GetParent(LinkedNode<T>* pNode);//获取指定结点的双亲；
	void DeleteSubTree(LinkedNode<T>* pNode); //删除以指定结点为根的子树；
	LinkedNode<T>* SearchByKey(const T &x);// 根据关键字查找结点；
	LinkedNode<T>* root;//根结点
};
//构造函数,创建空二叉树
template<class T>
LinkBinTree<T>::LinkBinTree()
{
	root=NULL;
}
//判断树是否为空
template<class T>
bool LinkBinTree<T>::IsEmpty()
{
	return root==NULL;
}
//以指定元素创建根结点
template<class T>
LinkedNode<T>* LinkBinTree<T>::Creatroot(const T&x)
{
	//如果二叉树原来存在结点，则将其清空
	if(root!=NULL)//若原先存在根结点，则直接将根结点的值置为x
		root->data=x;
	else//否则，创建一个新结点作为根结点
	    root=new LinkedNode<T>(x);
	return root;
}
//获取根结点
template<class T>
LinkedNode<T>* LinkBinTree<T>::Getroot()
{
	return root;
}
//将一个结点作为指定结点的左孩子插入
template<class T>
LinkedNode<T>* LinkBinTree<T>::InsertLC(LinkedNode<T>* pNode,const T&x)
{
	if(pNode==NULL)//对参数有效性进行判断
		return NULL;
	LinkedNode<T> *pNew=new LinkedNode<T>(x);//创建新结点
	if(pNew==NULL)//如果分配内存失败
		return NULL;
    pNode->pLChild=pNew;//将新结点作为PNode的左孩子(即将结点中的左孩子指针指向新结点)
	return pNew;
}
//将一个结点作为指定结点的右孩子插入
template<class T>
LinkedNode<T>* LinkBinTree<T>::InsertRC(LinkedNode<T>* pNode,const T&x)
{
	if(pNode==NULL)//对参数有效性判断
		return NULL;
	LinkedNode<T> *pNew=new LinkedNode<T>(x);//创建新结点
	if(pNew==NULL)//如果分配内存失败
		return NULL;
    pNode->pRChild=pNew;//将新结点作为PNode的右孩子(即将结点中的右孩子指针指向新结点)
	return pNew;
}
//获取指定结点元素值
template<class T>
bool LinkBinTree<T>::GetNodeVal(LinkedNode<T>* pNode,T &x)
{
	if(pNode==NULL)
		return false;
	x=pNode->data;
	return true;
}
//修改指定结点元素值
template<class T>
bool LinkBinTree<T>::ChangeNodeVal(LinkedNode<T>* pNode,const T &x)
{
	if(pNode==NULL)
		return false;
	pNode->data=x;
	return true;
}
//获取指定结点的左孩子结点
template<class T>
LinkedNode<T>* LinkBinTree<T>::GetLC(LinkedNode<T>* pNode)
{
	if(pNode==NULL)
		return NULL;
	return pNode->pLChild;  
}
//获取指定结点的右孩子结点
template<class T>
LinkedNode<T>* LinkBinTree<T>::GetRC(LinkedNode<T>* pNode)
{
	if(pNode==NULL)
		return NULL;
	return pNode->pRChild;
}
//逐层遍历
template<class T>
void LinkBinTree<T>::LevelOrderTraverse()
{
	if(root==NULL)
		return;
	LinkQueue<LinkedNode<T>*> S;
	S.Insert(root);
	LinkedNode<T> *p= NULL;
	while(!S.IsEmpty())
	{
		S.Out(p);
		cout<<p->data<<endl;
		if(p->pLChild!=NULL)
			S.Insert(p->pLChild);
		if(p->pRChild!=NULL)
			S.Insert(p->pRChild);
	}
}
//获取指定结点的双亲
template<class T>
LinkedNode<T>* LinkBinTree<T>::GetParent(LinkedNode<T>* pNode)
{
	if(pNode==NULL||root==NULL||pNode==root)//若二叉树为空或者指定结点为空或者指定结点为根结点
		return NULL;
	LinkQueue<LinkedNode<T>*> Q;
	//按非递归逐层遍历的方式搜索双亲结点
	Q.Insert(root);//将根结点入队
	LinkedNode<T>* p=NULL;
	//当队列不为空时进行循环
	while(!Q.IsEmpty())
	{
		Q.Out(p);//队头元素出队
		if(p->pLChild==pNode||p->pRChild==pNode)//如果PNode是队头元素的孩子结点，则返回队头元素
			return p;
		if(p->pLChild!=NULL)//若结点存在左子树，则将左子树根结点入队
			Q.Insert(p->pLChild);
		if(p->pRChild!=NULL)//若结点存在右子树，则将右子树根结点入队
			Q.Insert(p->pRChild);
	}
	return NULL;                 
}
//删除以指定结点为根的子树
template<class T>
void LinkBinTree<T>::DeleteSubTree(LinkedNode<T>* pNode)
{
	if(pNode==NULL)//若指定结点为空则返回
		return;
	if(pNode->pLChild!=NULL)//删除左子树
		DeleteSubTree(pNode->pLChild);
	if(pNode->pRChild!=NULL)//删除右子树
		DeleteSubTree(pNode->pRChild);
	LinkedNode<T> *p=GetParent(pNode);
	if(p!=NULL)//若指定结点存在双亲结点，则将双亲结点的左右孩子指针域置空
	{
		if(p->pLChild==pNode)
		p->pLChild=NULL;
	    if(p->pRChild==pNode)
		p->pRChild=NULL;
	}
	else 
		if(pNode==root)//若将整棵二叉树删除，则令根结点为空
			root=NULL;
		else //否则，指定结点不是二叉树中的节点，直接返回
			return;
    delete pNode;
}
//根据关键字查找结点
template<class T>
LinkedNode<T>* LinkBinTree<T>::SearchByKey(const T &x)
{
    LinkQueue<LinkedNode<T>*> R;
	if(root==NULL)
		return NULL;
	R.Insert(root);
	LinkedNode<T>* p=NULL;
	while(!R.IsEmpty())//按非递归层次遍历的方式查找节点
	{
		R.Out(p);
		if(p->data==x)
			return p;
		if(p->pLChild!=NULL)
			R.Insert(p->pLChild);
		if(p->pRChild!=NULL)
			R.Insert(p->pRChild);
	}
	return NULL;
}
#endif